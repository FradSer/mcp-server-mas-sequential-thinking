#!/usr/bin/env python3
"""Simple test for Six Thinking Hats core functionality without external dependencies.
"""

import os
import sys

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

def test_hat_color_enum():
    """Test HatColor enum basics."""
    try:
        from src.mcp_server_mas_sequential_thinking.six_hats_core import HatColor

        print("üé© Testing HatColor Enum:")
        print(f"  WHITE: {HatColor.WHITE.value}")
        print(f"  RED: {HatColor.RED.value}")
        print(f"  BLACK: {HatColor.BLACK.value}")
        print(f"  YELLOW: {HatColor.YELLOW.value}")
        print(f"  GREEN: {HatColor.GREEN.value}")
        print(f"  BLUE: {HatColor.BLUE.value}")
        print("‚úÖ HatColor enum working correctly")
        return True
    except Exception as e:
        print(f"‚ùå HatColor enum test failed: {e}")
        return False


def test_hat_capabilities():
    """Test hat capability definitions."""
    try:
        from src.mcp_server_mas_sequential_thinking.six_hats_core import (
            BlackHatCapability,
            BlueHatCapability,
            GreenHatCapability,
            RedHatCapability,
            WhiteHatCapability,
            YellowHatCapability,
        )

        print("\nüé© Testing Hat Capabilities:")

        # Test each hat capability
        hats = [
            ("White", WhiteHatCapability()),
            ("Red", RedHatCapability()),
            ("Black", BlackHatCapability()),
            ("Yellow", YellowHatCapability()),
            ("Green", GreenHatCapability()),
            ("Blue", BlueHatCapability()),
        ]

        for hat_name, capability in hats:
            print(f"  {hat_name} Hat: {capability.role}")
            print(f"    Focus: {capability.cognitive_focus}")
            print(f"    Time: {capability.timing_config.default_time_seconds}s")

            # Test instruction generation
            instructions = capability.get_instructions("Test context", {})
            print(f"    Instructions: {len(instructions)} lines")

        print("‚úÖ All hat capabilities working correctly")
        return True
    except Exception as e:
        print(f"‚ùå Hat capabilities test failed: {e}")
        return False


def test_problem_analysis():
    """Test problem type analysis."""
    try:
        from src.mcp_server_mas_sequential_thinking.six_hats_router import (
            ProblemAnalyzer,
        )

        print("\nüß≠ Testing Problem Analysis:")

        analyzer = ProblemAnalyzer()

        # Mock ThoughtData for testing
        class MockThoughtData:
            def __init__(self, thought):
                self.thought = thought

        # Test different problem types
        test_cases = [
            ("What is the capital of France?", "factual"),
            ("How can we innovate education?", "creative"),
            ("Should we invest in this project?", "decision"),
            ("Â¶ÇÊûúÁîüÂëΩÁªàÂ∞ÜÁªìÊùüÔºåÊàë‰ª¨‰∏∫‰ªÄ‰πàË¶ÅÊ¥ªÁùÄÔºü", "philosophical"),
            ("Evaluate the pros and cons of remote work", "evaluative"),
        ]

        for question, expected_type in test_cases:
            thought_data = MockThoughtData(question)
            characteristics = analyzer.analyze_problem(thought_data)

            print(f"  Question: {question[:50]}...")
            print(f"    Detected: {characteristics.primary_type.value}")
            print(f"    Expected: {expected_type}")
            print(f"    ‚úÖ {'Match' if characteristics.primary_type.value == expected_type else 'Different'}")

        print("‚úÖ Problem analysis working correctly")
        return True
    except Exception as e:
        print(f"‚ùå Problem analysis test failed: {e}")
        return False


def test_sequence_library():
    """Test hat sequence strategy library."""
    try:
        from src.mcp_server_mas_sequential_thinking.six_hats_router import (
            HatComplexity,
            ProblemType,
            SixHatsSequenceLibrary,
        )

        print("\nüìö Testing Sequence Library:")

        library = SixHatsSequenceLibrary()

        # Test strategy retrieval
        single_strategy = library.get_strategy("single_factual")
        if single_strategy:
            print(f"  Single Factual Strategy: {single_strategy.name}")
            print(f"    Sequence: {[hat.value for hat in single_strategy.hat_sequence]}")
            print(f"    Time: {single_strategy.estimated_time_seconds}s")

        # Test strategies by problem type
        creative_strategies = library.get_strategies_for_problem(ProblemType.CREATIVE)
        print(f"  Creative strategies: {len(creative_strategies)} found")

        # Test strategies by complexity
        single_strategies = library.get_strategies_by_complexity(HatComplexity.SINGLE)
        print(f"  Single complexity strategies: {len(single_strategies)} found")

        print("‚úÖ Sequence library working correctly")
        return True
    except Exception as e:
        print(f"‚ùå Sequence library test failed: {e}")
        return False


def test_timing_configs():
    """Test hat timing configurations."""
    try:
        from src.mcp_server_mas_sequential_thinking.six_hats_core import (
            HAT_TIMING_CONFIGS,
            HatColor,
        )

        print("\n‚è±Ô∏è Testing Timing Configurations:")

        for hat_color, timing_config in HAT_TIMING_CONFIGS.items():
            print(f"  {hat_color.value.title()} Hat:")
            print(f"    Default: {timing_config.default_time_seconds}s")
            print(f"    Range: {timing_config.min_time_seconds}-{timing_config.max_time_seconds}s")
            print(f"    Quick reaction: {timing_config.is_quick_reaction}")

        # Test that red hat is configured as quick reaction
        red_config = HAT_TIMING_CONFIGS[HatColor.RED]
        if red_config.is_quick_reaction and red_config.default_time_seconds == 30:
            print("‚úÖ Red hat correctly configured as quick reaction (30s)")
        else:
            print("‚ö†Ô∏è  Red hat timing configuration issue")

        print("‚úÖ Timing configurations working correctly")
        return True
    except Exception as e:
        print(f"‚ùå Timing configurations test failed: {e}")
        return False


def main():
    """Run all simple tests."""
    print("üé© SIX THINKING HATS CORE FUNCTIONALITY TESTS")
    print("=" * 60)

    tests = [
        test_hat_color_enum,
        test_hat_capabilities,
        test_problem_analysis,
        test_sequence_library,
        test_timing_configs,
    ]

    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with error: {e}")
            results.append(False)

    # Summary
    print("\n" + "="*60)
    print("TEST SUMMARY")
    print("="*60)

    passed = sum(results)
    total = len(results)

    print(f"‚úÖ Tests Passed: {passed}/{total}")
    print(f"‚ùå Tests Failed: {total - passed}/{total}")

    if passed == total:
        print("\nüéâ ALL CORE TESTS PASSED!")
        print("   Six Hats core functionality is working correctly.")
        print("   Ready for integration with the MAS system.")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} tests failed. Check the issues above.")

    print()


if __name__ == "__main__":
    main()
